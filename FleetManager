FleetManager
    public class FleetManager: MonoBehaviour
    {
        public FleetController fleetController;
        public GameObject fleetPrefab;
        public List<FleetController> fleetControllers;
        public FleetSO fleetSO;
        public Dictionary<int,int> civFleetCounter = new Dictionary<int, int>(); // key int for civ enum, value is next fleet number
       // public static Dictionary<CivEnum, List<FleetController>> fleetDataDictionary = new Dictionary<CivEnum, List<FleetController>>();

        private void Start()
        {
            for (int i = 0; i < 180; i++)
            {
                civFleetCounter.Add(i,1);
            }
        }
        private void OnEnable()
        {
            if (fleetController != null)
            {
                fleetSO.myObject = fleetPrefab;
               // fleetController.fleetData.currentPosition = transform.position; ???????
            }
        }
        void Update()
        {
            if (fleetController != null)
            {
                // Does this belong in Controller, not managaer?
                //fleetSO.currentPosition = transform.position;
            }
        }
        private void OnDisable()
        {
            fleetSO.ResetSO();
        }

        // ToDo get galaxy ship for fleet starter and load this with an initializFeet thingy
        public FleetController InitializFleet(CivEnum civEnum)
        {
            int nextNumber;
            GameObject fleetGO = Instantiate(fleetPrefab);
            InitializFleetController(fleetGO.GetComponent<FleetController>(), fleetSO);
            if(civFleetCounter.TryGetValue((int)civEnum, out nextNumber))
            {
                fleetController.fleetData.fleetNum = nextNumber;
                civFleetCounter[(int)civEnum] += nextNumber;
            }
            //fleetController.fleetData.myObject = fleetGO;   
            fleetController.fleetData.currentPosition = fleetGO.transform.position;
            // ToDo fleetController.fleetData.maxWarpFactor = max warp of slowist ship.

            fleetController.fleetData.description = "bla bla bal";
            // ToDo get insignia Sprite from assests for insignia of fleet
                //fleetController.fleetData.insign = ;
            fleetController.fleetData.civOwnerEnum = civEnum;
            fleetController.fleetData.name = civEnum.ToString() + " Fleet-" + nextNumber.ToString();
            fleetController.fleetData.maxWarpFactor = 9f; // to do
            fleetController.fleetData.warpFactor = 0f;
            // update list fleet controllers
            fleetControllers.Add(fleetController);

            return fleetController;
        }
        public void InitializFleetController(FleetController fleetController, FleetSO fleetSO)
        { 
            fleetController.fleetData.name = fleetSO.name;
        }
        public void AddShipsToFleet(FleetController fleetControler, List<Ship> addList)
        {
            //if (fleetDataDictionary.ContainsKey(fleetController.civOwnerEnum))
            //    fleetDataDictionary[fl].Add(myFleetData);
            //else
            //{
            //    List<FleetController> myList = new List<FleetController>() { myFleetData };
            //    fleetDataDictionary.Add(civEnum, myList);
            //}

        }
        public void RemoveShipsFromFleet(FleetController fleetContoler, List<Ship> removeList)
        {

            // ToDo Make new Fleet out of the removed list and or destroy fleet with empty list
            //if (fleetDataDictionary.ContainsKey(fleetController.civOwnerEnum))
            //    fleetDataDictionary[fl].Add(myFleetData);
            //else
            //{
            //    List<FleetController> myList = new List<FleetController>() { myFleetData };
            //    fleetDataDictionary.Add(civEnum, myList);
            //}

        }

    }